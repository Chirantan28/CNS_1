import nmap
import subprocess
from scapy.all import ARP, Ether, srp

def check_nmap_installed():
    try:
        result = subprocess.run(['C:\\Program Files (x86)\\Nmap\\nmap.exe', '--version'], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print(result.stdout.decode())  # Debugging statement
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        return False

def scan_network(target):
    if not check_nmap_installed():
        return {'error': 'nmap is not installed or not found in PATH'}

    scanner = nmap.PortScanner(nmap_search_path=['C:\\Program Files (x86)\\Nmap\\nmap.exe'])
    results = {}

    try:
        # Perform a comprehensive scan
        scanner.scan(target, arguments='-sV --script vuln')
        results['host'] = target
        results['state'] = scanner[target].state()
        results['protocols'] = {}

        for proto in scanner[target].all_protocols():
            lport = list(scanner[target][proto].keys())
            lport.sort()
            results['protocols'][proto] = {}

            for port in lport:
                port_info = scanner[target][proto][port]
                results['protocols'][proto][port] = {
                    'name': port_info['name'],
                    'product': port_info.get('product', ''),
                    'version': port_info.get('version', ''),
                    'extrainfo': port_info.get('extrainfo', ''),
                    'vulnerabilities': port_info.get('script', {}).get('vuln', {})
                }

    except Exception as e:
        results['error'] = str(e)
        print(f"Error during scan: {e}")  # Debugging statement

    return results


def analyze_results(scan_results):
    vulnerabilities = []

    if 'error' in scan_results:
        return vulnerabilities

    for proto, ports in scan_results['protocols'].items():
        for port, service in ports.items():
            if 'http' in service.lower():
                vulnerabilities.append({
                    'port': port,
                    'service': service,
                    'vulnerability': 'Potential HTTP vulnerability detected.'
                })

    return vulnerabilities


def perform_scan(target_ip):
    arp = ARP(pdst=target_ip)
    ether = Ether(dst="ff:ff:ff:ff:ff:ff")
    packet = ether/arp

    result = srp(packet, timeout=3, verbose=0)[0]

    clients = []
    for sent, received in result:
        clients.append({'ip': received.psrc, 'mac': received.hwsrc})

    return clients


def main(target):
    scan_results = scan_network(target)
    findings = analyze_results(scan_results)
    return findings